/~
   Copyright 2014 Murray Lang

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.	
   
   The format of this file is as specified for JS/CC: 
		http://jscc.phorward-software.com/
   Kudos to Jan Max Meyer for providing such a useful tool free of charge.

   This file describes a parser for an assembly language based on the byte
   codes of the Babuino Virtual Machine. These codes are based on Cricket
   Logo, but are more comprehensive.   
~/
	
	
[*

//--------------------------------------------------------------------------
// My stuff

function CricketAssembler ()
{
	this.reset();
}

CricketAssembler.prototype.reset = 
	function ()
	{
		this.codes       = new Array();
		this.output      = null;
		this.errorOutput = null;
	}

CricketAssembler.prototype.parse = 
	function (text, output, errorOutput)
	{
		this.reset();
		this.output      = output;
		this.errorOutput = errorOutput;
		
		var error_cnt 	= 0;
		var error_off	= new Array();
		var error_la	= new Array();
		
		//##PREFIX##_dbg_withparsetree = true;
		
		if( ( error_cnt = __##PREFIX##parse( text, error_off, error_la ) ) > 0 )
		{
			var i;
			for( var i = 0; i < error_cnt; i++ )
				this.errorOutput( "Parse error near >" 
					+ text.substr( error_off[i], 30 ) + "<, expecting \"" + error_la[i].join() + "\"" );
		}
		else
		{
			this.printMachineCodes();
		}
		return error_cnt;
	};

CricketAssembler.prototype.printMachineCodes =
	function ()
	{
		for (var i = 0; i < this.codes.length; i++)
		{
			this.output(this.codes[i]);
		}
	};
	
CricketAssembler.prototype.append =
	function (str)
	{
		this.codes.push(str);
	};

var as = new CricketAssembler();
*]

!	' |\r|\n|\t|;[^\n]*\n'

	"begin"						[* %match = 0; *]
	"byte"						[* %match = 1; *]
	"short"						[* %match = 2; *]
	"block"						[* %match = 3; *]
	"eob"						[* %match = 4; *]
	"return"					[* %match = 7; *]
	"output"					[* %match = 8; *]
	"repeat"					[* %match = 9; *]
	"if"						[* %match = 10; *]
	"ifelse"					[* %match = 11; *]
	"beep"						[* %match = 12; *]
	"waituntil"					[* %match = 14; *]
	"loop"						[* %match = 15; *]
	"forever"					[* %match = 15; *]
	"wait"						[* %match = 16; *]
	"timer"						[* %match = 17; *]
	"resett"					[* %match = 18; *]
	"send"						[* %match = 19; *]
	"serial"					[* %match = 20; *]
	"newserial\?" NewSerial		[* %match = 21; *]
	"random"					[* %match = 22; *]
	"add"						[* %match = 23; *]
	"sub"						[* %match = 24; *]
	"mul"						[* %match = 25; *]
	"div"						[* %match = 26; *]
	"mod"						[* %match = 27; *]
	"eq"						[* %match = 28; *]
	"gt"						[* %match = 29; *]
	"lt"						[* %match = 30; *]
	"and"						[* %match = 31; *]
	"or"						[* %match = 32; *]
	"xor"						[* %match = 33; *]
	"not"						[* %match = 34; *]
	"setglobal"					[* %match = 35; *]
	"getglobal"					[* %match = 36; *]
	"aset"						[* %match = 37; *]
	"aget"						[* %match = 38; *]
	"record"					[* %match = 39; *]
	"recall"					[* %match = 40; *]
	"resetdp"					[* %match = 41; *]
	"setdp"						[* %match = 42; *]
	"erase"						[* %match = 43; *]
	"when"						[* %match = 44; *]
	"erase"						[* %match = 45; *]
	"on"						[* %match = 49; *]
	"onfor"						[* %match = 50; *]
	"off"						[* %match = 51; *]
	"thisway"					[* %match = 52; *]
	"thatway"					[* %match = 53; *]
	"rd"						[* %match = 54; *]
	"setpower"					[* %match = 59; *]
	"brake"						[* %match = 60; *]
	"ledon"						[* %match = 85; *]
	"ledoff"					[* %match = 86; *]
	"setsvh"					[* %match = 87; *]
	"svr"						[* %match = 88; *]
	"svl"						[* %match = 89; *]
	"motors"					[* %match = 90; *]
	"while"						[* %match = 128; *]
	"do"						[* %match = 129; *]
	"call"						[* %match = 130; *]
	"le"						[* %match = 131; *]
	"ge"						[* %match = 132; *]
	"ne"						[* %match = 133; *]
	"setlocal"					[* %match = 134; *]
	"getlocal"					[* %match = 135; *]
	"settemp"					[* %match = 136; *]
	"gettemp"					[* %match = 137; *]
	"getparam"					[* %match = 138; *]
	"goto"						[* %match = 139; *]
	"for"						[* %match = 140; *]
	"randomxy"					[* %match = 141; *]
	"sendn"						[* %match = 142; *]
	"serialn"					[* %match = 143; *]
	"newserialn\?" NewSerialn	[* %match = 144; *]
	"setsvhn"					[* %match = 145; *]
	"svrn"						[* %match = 146; *]
	"svln"						[* %match = 147; *]
	"ain"						[* %match = 148; /* analog input number is provided by the previous short */*]
	"aout"						[* %match = 149; /* analog output number is provided by the previous short */
												 /* analog value is provided by the short before that*/*]
	"din"						[* %match = 150; /* digital input number is provided by the previous short */*]
    "dout"						[* %match = 151; /* digital output number is provided by the previous short */
												 /* digital value is provided by the short before that*/*]	
	"push"						[* %match = 152; *]
	"pop"						[* %match = 153; *]
	"enter"						[* %match = 154; *]
	"leave"						[* %match = 155; *]
	'sensor[1-8]'	Sensorn	[*	var id = %match.substr( 6 ); 
										// Legacy sensor[1-8] commands
									var num = parseInt(id);
									if (num == 1)
										%match = 55;
									else if (num == 2)
										%match = 56;
									else
										%match = 70 + num; // ie 73 to 78
								*]
	'switch[1-8]'	Switchn	[* var id = %match.substr( 6 ); 
										// Legacy switch[1-8] commands
									var num = parseInt(id);
									if (num == 1)
										%match = 57;
									else if (num == 2)
										%match = 58;
									else
										%match = 76 + num; // ie 79 to 84
								*]
	'-?[0-9]+'	DecInteger			[* %match = parseInt(%match); *]
	'0b[0-9]+'	BinInteger			[* %match = parseInt(%match.substr(2), 2); *]
	'0x[0-9]+'	HexInteger			[* %match = parseInt(%match.substr(2), 16); *]
	'[0-9]+\:'	Address
	';'
	;

##

Program:		Program Stmt				[* *]
				|
				;
		
Stmt:			  Address Cmd	
				| Cmd
				;
				
Cmd:			  UnaryCmd					[* as.append(%1); *]
				| BinaryCmd	
				;

BinaryCmd:		  byte	DecInteger			[* as.append(%1); as.append(%2); *]
				| short	DecInteger			[* as.append(%1); as.append((%2 >> 8) & 0xff ); as.append(%2 & 0xff); *]
				| block	DecInteger			[* as.append(%1); as.append(%2); *]
				;
UnaryCmd:		  begin	
				| eob						
				| return					
				| output					
				| repeat					
				| if					
				| ifelse
				| goto
				| beep						
				| waituntil					
				| loop
				| for
				| forever					
				| wait						
				| timer						
				| resett					
				| send
				| sendn
				| serial
				| serialn
				| NewSerial
				| NewSerialn				
				| random
				| randomxy
				| add						
				| sub						
				| mul						
				| div						
				| mod						
				| eq						
				| gt						
				| lt						
				| le						
				| ge						
				| ne						
				| and						
				| or						
				| xor						
				| not						
				| setglobal					
				| getglobal					
				| aset						
				| aget						
				| record					
				| recall					
				| resetdp					
				| setdp						
				| erase						
				| when						
				| erase						
				| on						
				| onfor						
				| off						
				| thisway					
				| thatway					
				| rd						
				| setpower					
				| brake						
				| ledon						
				| ledoff					
				| setsvh					
				| svr						
				| svl						
				| motors					
				| while						
				| do
				| call
				| setlocal					
				| getlocal
				| settemp					
				| gettemp
				| getparam
				| Sensorn
				| Switchn
				| ain
				| aout
				| din
				| dout
				| push
				| pop
				| enter
				| leave
				;


Value:			  DecInteger
				| BinInteger
				| HexInteger
				;

				
[*

/* comment out the following Windows-specific code when compiling for chrome */
/*
function open_file( file )
{
	var fs = new ActiveXObject( 'Scripting.FileSystemObject' );	
	var src = new String();

	if( fs && fs.fileExists( file ) )
	{
		var f = fs.OpenTextFile( file, 1 );
		if( f )
		{
			src = f.ReadAll();
			f.Close();
		}
	}
	
	return src;
}

function outputHandler(str)
{
	WScript.Echo(str);
}

function errorOutputHandler(str)
{
	WScript.Echo(str);
}

// This code will be called when the generated script is run
if( WScript.Arguments.length > 0 )
{
	var str = open_file( WScript.Arguments(0) );
	
	//as = new CricketAssembler();
	as.parse(str, outputHandler, errorOutputHandler);
}
else
{
	errorOutputHandler( "usage: CricketAssembler.js <filename>" );
}
*/
*]